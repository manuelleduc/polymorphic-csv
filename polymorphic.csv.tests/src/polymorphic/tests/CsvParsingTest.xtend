/*
 * generated by Xtext 2.13.0
 */
package polymorphic.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.xbase.testing.CompilationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(CsvInjectorProvider)
class CsvParsingTest {
//	@Inject extension ParseHelper<Model>
	@Inject extension CompilationTestHelper

	@Test
	def void loadModel() {
		'''
			target hello.Csv
			language Java
			"/tmp/test.csv";
		'''.assertCompilesTo('''
		package hello.Csv;
		
		class Csv {
		
		}
		''')
//		Assert.assertNotNull(result)
//		val errors = result.eResource.errors
//		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	
	@Test 
	def void loadModelPython() {		
		
		'''
		package foo;
		constraints {
		    java = true
		    maven = true
		}
		languages {
		    python (a)
		}
		read a "/tmp/test.csv"
		nbrow a
		//print a
		read b "/tmp/test2.csv"
		nbrow b
		//print b
		'''.assertCompilesTo('''
		import csv
		a = open('/tmp/test.csv', 'rt')
		a_read = csv.reader(a)
		print(sum(1 for row in a_read))
		b = open('/tmp/test2.csv', 'rt')
		b_read = csv.reader(b)
		print(sum(1 for row in b_read))
		''')
		
	}
}
