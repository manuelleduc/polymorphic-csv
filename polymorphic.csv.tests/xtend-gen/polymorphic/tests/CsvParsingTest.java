/**
 * generated by Xtext 2.13.0
 */
package polymorphic.tests;

import com.google.inject.Inject;
import java.util.Collections;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Pair;
import org.junit.Test;
import org.junit.runner.RunWith;
import polymorphic.csv.CsvPackage;
import polymorphic.csv.Model;
import polymorphic.tests.CsvInjectorProvider;
import polymorphic.tests.lib.PolymorphicCsvCompilationTestHelper;
import polymorphic.validation.CsvValidator;

@RunWith(XtextRunner.class)
@InjectWith(CsvInjectorProvider.class)
@SuppressWarnings("all")
public class CsvParsingTest {
  @Inject
  @Extension
  private ParseHelper<Model> _parseHelper;
  
  @Inject
  @Extension
  private PolymorphicCsvCompilationTestHelper _polymorphicCsvCompilationTestHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void bashTest1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package mpackage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("constraints {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("java = true");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("maven = true");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("languages {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bash (a.b.java.C)");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("read a \"/tmp/test.csv\"");
      _builder.newLine();
      _builder.append("print a");
      _builder.newLine();
      _builder.append("save a \"/tmp/test2.csv\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("MULTIPLE FILES WERE GENERATED");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 1 : /myProject/./src-gen/mpackage/bash/a/b/java/C.sh");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("#!/bin/bash");
      _builder_1.newLine();
      _builder_1.append("cat /tmp/test.csv");
      _builder_1.newLine();
      _builder_1.append("cp /tmp/test.csv /tmp/test2.csv");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 2 : /myProject/./src-gen/mpackage/build.sh");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("mkdir -p ./inputs");
      _builder_1.newLine();
      _builder_1.append("rm -r ./bash/inputs");
      _builder_1.newLine();
      _builder_1.append("cp -r ./inputs ./bash/inputs");
      _builder_1.newLine();
      _builder_1.append("docker-compose build");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 3 : /myProject/./src-gen/mpackage/docker-compose.yml");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("version: \'3\'");
      _builder_1.newLine();
      _builder_1.append("services:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("bash:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("build:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("context: ./bash");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 4 : /myProject/./src-gen/mpackage/run.sh");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("rm -r ./logs");
      _builder_1.newLine();
      _builder_1.append("mkdir -p ./logs");
      _builder_1.newLine();
      _builder_1.append("docker-compose up");
      _builder_1.newLine();
      _builder_1.newLine();
      this._polymorphicCsvCompilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void bashTest2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package mpackage;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("constraints {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("java = true");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("maven = true");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("languages {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bash (a.b.java.C)");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("read a \"/tmp/test.csv\"");
      _builder.newLine();
      _builder.append("print a");
      _builder.newLine();
      _builder.append("save a \"/tmp/test2.csv\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("/myProject/./src-gen/mpackage/bash/a/b/java/C.sh");
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("#!/bin/bash");
      _builder_2.newLine();
      _builder_2.append("cat /tmp/test.csv");
      _builder_2.newLine();
      _builder_2.append("cp /tmp/test.csv /tmp/test2.csv");
      _builder_2.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of(_builder_1.toString(), _builder_2.toString());
      this._polymorphicCsvCompilationTestHelper.assertFileCompilesTo(_builder, Collections.<String, CharSequence>unmodifiableMap(CollectionLiterals.<String, CharSequence>newHashMap(_mappedTo)));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void bashTest3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package important;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("constraints {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("languages {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bash (truc)");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("read aaa \"/home/yannick/Bureau/dossier_test/Sans_nom_1.csv\" utf8");
      _builder.newLine();
      _builder.append("print aaa");
      _builder.newLine();
      _builder.append("nbrow aaa");
      _builder.newLine();
      _builder.append("save aaa \"/home/yannick/Bureau/dossier_test/Copy_Sans_nom_1.csv\"");
      _builder.newLine();
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("/myProject/./src-gen/important/bash/truc.sh");
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("#!/bin/bash");
      _builder_2.newLine();
      _builder_2.append("cat /home/yannick/Bureau/dossier_test/Sans_nom_1.csv");
      _builder_2.newLine();
      _builder_2.append("echo $[$(wc -l < /home/yannick/Bureau/dossier_test/Sans_nom_1.csv)-1]");
      _builder_2.newLine();
      _builder_2.append("cp /home/yannick/Bureau/dossier_test/Sans_nom_1.csv /home/yannick/Bureau/dossier_test/Copy_Sans_nom_1.csv");
      _builder_2.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of(_builder_1.toString(), _builder_2.toString());
      this._polymorphicCsvCompilationTestHelper.assertFileCompilesTo(_builder, Collections.<String, CharSequence>unmodifiableMap(CollectionLiterals.<String, CharSequence>newHashMap(_mappedTo)));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package uuu;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("constraints {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("java = true");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("maven = true");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("languages {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("java (a.b.java.C)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("commons (a.b.commons.C)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("python (python_version)");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("read a \"/tmp/test.csv\"");
      _builder.newLine();
      _builder.append("print a");
      _builder.newLine();
      _builder.append("//save a");
      _builder.newLine();
      _builder.append("save a \"/tmp/test2.csv\"");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("/myProject/./src-gen/uuu/build.sh");
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("mkdir -p ./inputs");
      _builder_2.newLine();
      _builder_2.append("rm -r ./java/inputs");
      _builder_2.newLine();
      _builder_2.append("cp -r ./inputs ./java/inputs");
      _builder_2.newLine();
      _builder_2.append("rm -r ./commons/inputs");
      _builder_2.newLine();
      _builder_2.append("cp -r ./inputs ./commons/inputs");
      _builder_2.newLine();
      _builder_2.append("rm -r ./python/inputs");
      _builder_2.newLine();
      _builder_2.append("cp -r ./inputs ./python/inputs");
      _builder_2.newLine();
      _builder_2.append("docker-compose build");
      _builder_2.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of(_builder_1.toString(), _builder_2.toString());
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("/myProject/./src-gen/uuu/commons/Dockerfile");
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("FROM maven");
      _builder_4.newLine();
      _builder_4.append("COPY . /project");
      _builder_4.newLine();
      _builder_4.append("COPY ./inputs /inputs");
      _builder_4.newLine();
      _builder_4.append("WORKDIR project");
      _builder_4.newLine();
      _builder_4.append("RUN mvn compile");
      _builder_4.newLine();
      _builder_4.append("ENTRYPOINT  mvn -q exec:java -Dexec.mainClass=\"a.b.commons.C\"");
      _builder_4.newLine();
      Pair<String, String> _mappedTo_1 = Pair.<String, String>of(_builder_3.toString(), _builder_4.toString());
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("/myProject/./src-gen/uuu/commons/pom.xml");
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("<project>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<modelVersion>4.0.0</modelVersion>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<groupId>uuu</groupId>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<artifactId>a.b.commons.C</artifactId>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<version>1</version>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.newLine();
      _builder_6.append("      ");
      _builder_6.append("<properties>");
      _builder_6.newLine();
      _builder_6.append("        ");
      _builder_6.append("<maven.compiler.source>1.8</maven.compiler.source>");
      _builder_6.newLine();
      _builder_6.append("        ");
      _builder_6.append("<maven.compiler.target>1.8</maven.compiler.target>");
      _builder_6.newLine();
      _builder_6.append("         ");
      _builder_6.append("<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>");
      _builder_6.newLine();
      _builder_6.append("      ");
      _builder_6.append("</properties>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<dependencies>");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("<dependency>");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("<groupId>org.apache.commons</groupId>");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("<artifactId>commons-csv</artifactId>");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("<version>1.5</version>");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("</dependency>");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("</dependencies>");
      _builder_6.newLine();
      _builder_6.append("</project>");
      Pair<String, String> _mappedTo_2 = Pair.<String, String>of(_builder_5.toString(), _builder_6.toString());
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("/myProject/./src-gen/uuu/commons/src/main/java/a/b/commons/C.java");
      StringConcatenation _builder_8 = new StringConcatenation();
      _builder_8.append("package a.b.commons;");
      _builder_8.newLine();
      _builder_8.newLine();
      _builder_8.append("import java.io.*;");
      _builder_8.newLine();
      _builder_8.append("import java.util.*;");
      _builder_8.newLine();
      _builder_8.append("import org.apache.commons.csv.*;");
      _builder_8.newLine();
      _builder_8.append("import java.util.stream.StreamSupport;");
      _builder_8.newLine();
      _builder_8.append("import java.util.stream.Collectors;");
      _builder_8.newLine();
      _builder_8.newLine();
      _builder_8.append("public class C {");
      _builder_8.newLine();
      _builder_8.append(" \t");
      _builder_8.append("public static void main(String[] args) throws  FileNotFoundException, IOException {");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("final List<CSVRecord> a = StreamSupport.stream(CSVFormat.RFC4180.parse(new FileReader(\"/tmp/test.csv\")).spliterator(), false).collect(Collectors.toList());");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("final StringBuilder sb0 = new StringBuilder();");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("try (CSVPrinter tmp0 = new CSVPrinter(sb0, CSVFormat.RFC4180)) {");
      _builder_8.newLine();
      _builder_8.append("\t\t");
      _builder_8.append("tmp0.printRecords(a);");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("System.out.println(sb0);");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("try (CSVPrinter tmp1 = new CSVPrinter(new FileWriter(new File(\"/tmp/test2.csv\")), CSVFormat.RFC4180)) {");
      _builder_8.newLine();
      _builder_8.append("\t\t");
      _builder_8.append("tmp1.printRecords(a);");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("}");
      _builder_8.newLine();
      Pair<String, String> _mappedTo_3 = Pair.<String, String>of(_builder_7.toString(), _builder_8.toString());
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("/myProject/./src-gen/uuu/docker-compose.yml");
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append("version: \'3\'");
      _builder_10.newLine();
      _builder_10.append("services:");
      _builder_10.newLine();
      _builder_10.append("  ");
      _builder_10.append("java:");
      _builder_10.newLine();
      _builder_10.append("    ");
      _builder_10.append("build:");
      _builder_10.newLine();
      _builder_10.append("      ");
      _builder_10.append("context: ./java");
      _builder_10.newLine();
      _builder_10.append("  ");
      _builder_10.append("commons:");
      _builder_10.newLine();
      _builder_10.append("    ");
      _builder_10.append("build:");
      _builder_10.newLine();
      _builder_10.append("      ");
      _builder_10.append("context: ./commons");
      _builder_10.newLine();
      _builder_10.append("  ");
      _builder_10.append("python:");
      _builder_10.newLine();
      _builder_10.append("    ");
      _builder_10.append("build:");
      _builder_10.newLine();
      _builder_10.append("      ");
      _builder_10.append("context: ./python");
      _builder_10.newLine();
      Pair<String, String> _mappedTo_4 = Pair.<String, String>of(_builder_9.toString(), _builder_10.toString());
      StringConcatenation _builder_11 = new StringConcatenation();
      _builder_11.append("/myProject/./src-gen/uuu/java/Dockerfile");
      StringConcatenation _builder_12 = new StringConcatenation();
      _builder_12.append("FROM maven");
      _builder_12.newLine();
      _builder_12.append("COPY . /project");
      _builder_12.newLine();
      _builder_12.append("COPY ./inputs /inputs");
      _builder_12.newLine();
      _builder_12.append("WORKDIR project");
      _builder_12.newLine();
      _builder_12.append("RUN mvn compile");
      _builder_12.newLine();
      _builder_12.append("ENTRYPOINT  mvn -q exec:java -Dexec.mainClass=\"a.b.java.C\"");
      _builder_12.newLine();
      Pair<String, String> _mappedTo_5 = Pair.<String, String>of(_builder_11.toString(), _builder_12.toString());
      StringConcatenation _builder_13 = new StringConcatenation();
      _builder_13.append("/myProject/./src-gen/uuu/java/pom.xml");
      StringConcatenation _builder_14 = new StringConcatenation();
      _builder_14.append("<project>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.append("<modelVersion>4.0.0</modelVersion>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.append("<groupId>uuu</groupId>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.append("<artifactId>a.b.java.C</artifactId>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.append("<version>1</version>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.newLine();
      _builder_14.append("      ");
      _builder_14.append("<properties>");
      _builder_14.newLine();
      _builder_14.append("        ");
      _builder_14.append("<maven.compiler.source>1.8</maven.compiler.source>");
      _builder_14.newLine();
      _builder_14.append("        ");
      _builder_14.append("<maven.compiler.target>1.8</maven.compiler.target>");
      _builder_14.newLine();
      _builder_14.append("         ");
      _builder_14.append("<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>");
      _builder_14.newLine();
      _builder_14.append("      ");
      _builder_14.append("</properties>");
      _builder_14.newLine();
      _builder_14.append("</project>");
      _builder_14.newLine();
      Pair<String, String> _mappedTo_6 = Pair.<String, String>of(_builder_13.toString(), _builder_14.toString());
      StringConcatenation _builder_15 = new StringConcatenation();
      _builder_15.append("/myProject/./src-gen/uuu/java/src/main/java/a/b/java/C.java");
      StringConcatenation _builder_16 = new StringConcatenation();
      _builder_16.append("package a.b.java;");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("import java.io.*;");
      _builder_16.newLine();
      _builder_16.append("import java.awt.Point;");
      _builder_16.newLine();
      _builder_16.append("import java.util.HashMap;");
      _builder_16.newLine();
      _builder_16.append("import java.util.Scanner;");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("public class C {");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("private HashMap<Point, String> _map = new HashMap<Point, String>();");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("private int _cols;");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("private int _rows;");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void open(File file) throws FileNotFoundException, IOException {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("open(file, \',\');");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void open(File file, char delimiter) throws FileNotFoundException, IOException {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("Scanner scanner = new Scanner(file);");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("scanner.useDelimiter(Character.toString(delimiter));");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("while(scanner.hasNextLine()) {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("String[] values = scanner.nextLine().split(Character.toString(delimiter));");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("int col = 0;");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("for ( String value: values ) {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("_map.put(new Point(col, _rows), value);");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("_cols = Math.max(_cols, ++col);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("_rows++;");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("scanner.close();");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void save(File file) throws IOException {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("save(file, \',\');");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void save(File file, char delimiter) throws IOException {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("FileWriter fw = new FileWriter(file);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("BufferedWriter bw = new BufferedWriter(fw);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("for (int row = 0; row < _rows; row++) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("for (int col = 0; col < _cols; col++) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("Point key = new Point(col, row);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("if (_map.containsKey(key)) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t\t");
      _builder_16.append("bw.write(_map.get(key));");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("if ((col + 1) < _cols) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t\t");
      _builder_16.append("bw.write(delimiter);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("bw.newLine();");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("bw.flush();");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("bw.close();");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public String serialize(final char delimiter) throws IOException {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("final StringBuilder sb = new StringBuilder();");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("for (int row = 0; row < _rows; row++) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("for (int col = 0; col < _cols; col++) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("final Point key = new Point(col, row);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("if (_map.containsKey(key)) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t\t");
      _builder_16.append("sb.append(_map.get(key));");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("if ((col + 1) < _cols) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t\t");
      _builder_16.append("sb.append(delimiter);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("sb.append(System.lineSeparator());");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("return sb.toString();");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public String get(int col, int row) {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("String val = \"\";");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("Point key = new Point(col, row);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("if (_map.containsKey(key)) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("val = _map.get(key);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("return val;");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void put(int col, int row, String value) {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("_map.put(new Point(col, row), value);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("_cols = Math.max(_cols, col+1);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("_rows = Math.max(_rows, row+1);");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public int rows() { return this._rows; }");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public static void main(String[] args) {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("try {");
      _builder_16.newLine();
      _builder_16.append("\t\t     \t");
      _builder_16.append("C a = new C();");
      _builder_16.newLine();
      _builder_16.append("\t\t     \t");
      _builder_16.append("a.open(new File(\"/tmp/test.csv\"));");
      _builder_16.newLine();
      _builder_16.append("\t\t     \t");
      _builder_16.append("System.out.println(a.serialize(\';\'));");
      _builder_16.newLine();
      _builder_16.append("\t\t     \t");
      _builder_16.append("a.save(new File(\"/tmp/test2.csv\"));");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("} catch (Exception e) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("System.out.println(e);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("}");
      _builder_16.newLine();
      Pair<String, String> _mappedTo_7 = Pair.<String, String>of(_builder_15.toString(), _builder_16.toString());
      StringConcatenation _builder_17 = new StringConcatenation();
      _builder_17.append("/myProject/./src-gen/uuu/python/Dockerfile");
      StringConcatenation _builder_18 = new StringConcatenation();
      _builder_18.append("FROM python");
      _builder_18.newLine();
      _builder_18.append("COPY . /project");
      _builder_18.newLine();
      _builder_18.append("COPY ./inputs /inputs");
      _builder_18.newLine();
      _builder_18.append("WORKDIR project");
      _builder_18.newLine();
      _builder_18.append("ENTRYPOINT python python_version.py");
      _builder_18.newLine();
      Pair<String, String> _mappedTo_8 = Pair.<String, String>of(_builder_17.toString(), _builder_18.toString());
      StringConcatenation _builder_19 = new StringConcatenation();
      _builder_19.append("/myProject/./src-gen/uuu/python/python_version.py");
      StringConcatenation _builder_20 = new StringConcatenation();
      _builder_20.append("import csv");
      _builder_20.newLine();
      _builder_20.append("for a_e in csv.reader(open(\'/tmp/test.csv\', \'rt\', encoding=\'\')):");
      _builder_20.newLine();
      _builder_20.append("  ");
      _builder_20.append("print(\', \'.join(a_e))");
      _builder_20.newLine();
      _builder_20.append("with open(\'/tmp/test2.csv\', \'wt\') as output_file:");
      _builder_20.newLine();
      _builder_20.append("  ");
      _builder_20.append("a_write = csv.writer(output_file)");
      _builder_20.newLine();
      _builder_20.append("  ");
      _builder_20.append("for a_e in csv.reader(open(\'/tmp/test.csv\', \'rt\', encoding=\'\')):");
      _builder_20.newLine();
      _builder_20.append("    ");
      _builder_20.append("a_write.writerow(tuple(a_e))");
      _builder_20.newLine();
      Pair<String, String> _mappedTo_9 = Pair.<String, String>of(_builder_19.toString(), _builder_20.toString());
      StringConcatenation _builder_21 = new StringConcatenation();
      _builder_21.append("/myProject/./src-gen/uuu/run.sh");
      StringConcatenation _builder_22 = new StringConcatenation();
      _builder_22.append("rm -r ./logs");
      _builder_22.newLine();
      _builder_22.append("mkdir -p ./logs");
      _builder_22.newLine();
      _builder_22.append("docker-compose up");
      _builder_22.newLine();
      Pair<String, String> _mappedTo_10 = Pair.<String, String>of(_builder_21.toString(), _builder_22.toString());
      this._polymorphicCsvCompilationTestHelper.assertFileCompilesTo(_builder, Collections.<String, CharSequence>unmodifiableMap(CollectionLiterals.<String, CharSequence>newHashMap(_mappedTo, _mappedTo_1, _mappedTo_2, _mappedTo_3, _mappedTo_4, _mappedTo_5, _mappedTo_6, _mappedTo_7, _mappedTo_8, _mappedTo_9, _mappedTo_10)));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelPython() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package foo;");
      _builder.newLine();
      _builder.append("constraints {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("java = true");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("maven = true");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("languages {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("python (a)");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("read a \"/tmp/test.csv\"");
      _builder.newLine();
      _builder.append("nbrow a");
      _builder.newLine();
      _builder.append("//print a");
      _builder.newLine();
      _builder.append("read b \"/tmp/test2.csv\"");
      _builder.newLine();
      _builder.append("nbrow b");
      _builder.newLine();
      _builder.append("//print b");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("/myProject/./src-gen/foo/build.sh");
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("mkdir -p ./inputs");
      _builder_2.newLine();
      _builder_2.append("rm -r ./python/inputs");
      _builder_2.newLine();
      _builder_2.append("cp -r ./inputs ./python/inputs");
      _builder_2.newLine();
      _builder_2.append("docker-compose build");
      _builder_2.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of(_builder_1.toString(), _builder_2.toString());
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("/myProject/./src-gen/foo/docker-compose.yml");
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("version: \'3\'");
      _builder_4.newLine();
      _builder_4.append("services:");
      _builder_4.newLine();
      _builder_4.append("  ");
      _builder_4.append("python:");
      _builder_4.newLine();
      _builder_4.append("    ");
      _builder_4.append("build:");
      _builder_4.newLine();
      _builder_4.append("      ");
      _builder_4.append("context: ./python");
      _builder_4.newLine();
      Pair<String, String> _mappedTo_1 = Pair.<String, String>of(_builder_3.toString(), _builder_4.toString());
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("/myProject/./src-gen/foo/python/Dockerfile");
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("FROM python");
      _builder_6.newLine();
      _builder_6.append("COPY . /project");
      _builder_6.newLine();
      _builder_6.append("COPY ./inputs /inputs");
      _builder_6.newLine();
      _builder_6.append("WORKDIR project");
      _builder_6.newLine();
      _builder_6.append("ENTRYPOINT python a.py");
      _builder_6.newLine();
      Pair<String, String> _mappedTo_2 = Pair.<String, String>of(_builder_5.toString(), _builder_6.toString());
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("/myProject/./src-gen/foo/python/a.py");
      StringConcatenation _builder_8 = new StringConcatenation();
      _builder_8.append("import csv");
      _builder_8.newLine();
      _builder_8.append("print(sum(1 for row in csv.reader(open(\'/tmp/test.csv\', \'rt\', encoding=\'\'))))");
      _builder_8.newLine();
      _builder_8.append("print(sum(1 for row in csv.reader(open(\'/tmp/test2.csv\', \'rt\', encoding=\'\'))))");
      _builder_8.newLine();
      Pair<String, String> _mappedTo_3 = Pair.<String, String>of(_builder_7.toString(), _builder_8.toString());
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("/myProject/./src-gen/foo/run.sh");
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append("rm -r ./logs");
      _builder_10.newLine();
      _builder_10.append("mkdir -p ./logs");
      _builder_10.newLine();
      _builder_10.append("docker-compose up");
      _builder_10.newLine();
      Pair<String, String> _mappedTo_4 = Pair.<String, String>of(_builder_9.toString(), _builder_10.toString());
      this._polymorphicCsvCompilationTestHelper.assertFileCompilesTo(_builder, Collections.<String, CharSequence>unmodifiableMap(CollectionLiterals.<String, CharSequence>newHashMap(_mappedTo, _mappedTo_1, _mappedTo_2, _mappedTo_3, _mappedTo_4)));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testNbRows() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package uuu;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("constraints {");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("languages {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("java (a.b.java.C)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("commons (a.b.commons.C)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("python (python_version)");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("read a \"/tmp/test.csv\"");
      _builder.newLine();
      _builder.append("nbrow a");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("/myProject/./src-gen/uuu/build.sh");
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("mkdir -p ./inputs");
      _builder_2.newLine();
      _builder_2.append("rm -r ./java/inputs");
      _builder_2.newLine();
      _builder_2.append("cp -r ./inputs ./java/inputs");
      _builder_2.newLine();
      _builder_2.append("rm -r ./commons/inputs");
      _builder_2.newLine();
      _builder_2.append("cp -r ./inputs ./commons/inputs");
      _builder_2.newLine();
      _builder_2.append("rm -r ./python/inputs");
      _builder_2.newLine();
      _builder_2.append("cp -r ./inputs ./python/inputs");
      _builder_2.newLine();
      _builder_2.append("docker-compose build");
      _builder_2.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of(_builder_1.toString(), _builder_2.toString());
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("/myProject/./src-gen/uuu/commons/Dockerfile");
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("FROM maven");
      _builder_4.newLine();
      _builder_4.append("COPY . /project");
      _builder_4.newLine();
      _builder_4.append("COPY ./inputs /inputs");
      _builder_4.newLine();
      _builder_4.append("WORKDIR project");
      _builder_4.newLine();
      _builder_4.append("RUN mvn compile");
      _builder_4.newLine();
      _builder_4.append("ENTRYPOINT  mvn -q exec:java -Dexec.mainClass=\"a.b.commons.C\"");
      _builder_4.newLine();
      Pair<String, String> _mappedTo_1 = Pair.<String, String>of(_builder_3.toString(), _builder_4.toString());
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("/myProject/./src-gen/uuu/commons/pom.xml");
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("<project>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<modelVersion>4.0.0</modelVersion>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<groupId>uuu</groupId>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<artifactId>a.b.commons.C</artifactId>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<version>1</version>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.newLine();
      _builder_6.append("      ");
      _builder_6.append("<properties>");
      _builder_6.newLine();
      _builder_6.append("        ");
      _builder_6.append("<maven.compiler.source>1.8</maven.compiler.source>");
      _builder_6.newLine();
      _builder_6.append("        ");
      _builder_6.append("<maven.compiler.target>1.8</maven.compiler.target>");
      _builder_6.newLine();
      _builder_6.append("         ");
      _builder_6.append("<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>");
      _builder_6.newLine();
      _builder_6.append("      ");
      _builder_6.append("</properties>");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.newLine();
      _builder_6.append("    ");
      _builder_6.append("<dependencies>");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("<dependency>");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("<groupId>org.apache.commons</groupId>");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("<artifactId>commons-csv</artifactId>");
      _builder_6.newLine();
      _builder_6.append("\t\t\t");
      _builder_6.append("<version>1.5</version>");
      _builder_6.newLine();
      _builder_6.append("\t\t");
      _builder_6.append("</dependency>");
      _builder_6.newLine();
      _builder_6.append("\t");
      _builder_6.append("</dependencies>");
      _builder_6.newLine();
      _builder_6.append("</project>");
      _builder_6.newLine();
      Pair<String, String> _mappedTo_2 = Pair.<String, String>of(_builder_5.toString(), _builder_6.toString());
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("/myProject/./src-gen/uuu/commons/src/main/java/a/b/commons/C.java");
      StringConcatenation _builder_8 = new StringConcatenation();
      _builder_8.append("package a.b.commons;");
      _builder_8.newLine();
      _builder_8.newLine();
      _builder_8.append("import java.io.*;");
      _builder_8.newLine();
      _builder_8.append("import java.util.*;");
      _builder_8.newLine();
      _builder_8.append("import org.apache.commons.csv.*;");
      _builder_8.newLine();
      _builder_8.append("import java.util.stream.StreamSupport;");
      _builder_8.newLine();
      _builder_8.append("import java.util.stream.Collectors;");
      _builder_8.newLine();
      _builder_8.newLine();
      _builder_8.append("public class C {");
      _builder_8.newLine();
      _builder_8.append(" \t");
      _builder_8.append("public static void main(String[] args) throws  FileNotFoundException, IOException {");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("final List<CSVRecord> a = StreamSupport.stream(CSVFormat.RFC4180.parse(new FileReader(\"/tmp/test.csv\")).spliterator(), false).collect(Collectors.toList());");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("System.out.println(a.size());");
      _builder_8.newLine();
      _builder_8.append("\t");
      _builder_8.append("}");
      _builder_8.newLine();
      _builder_8.append("}");
      _builder_8.newLine();
      Pair<String, String> _mappedTo_3 = Pair.<String, String>of(_builder_7.toString(), _builder_8.toString());
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("/myProject/./src-gen/uuu/docker-compose.yml");
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append("version: \'3\'");
      _builder_10.newLine();
      _builder_10.append("services:");
      _builder_10.newLine();
      _builder_10.append("  ");
      _builder_10.append("java:");
      _builder_10.newLine();
      _builder_10.append("    ");
      _builder_10.append("build:");
      _builder_10.newLine();
      _builder_10.append("      ");
      _builder_10.append("context: ./java");
      _builder_10.newLine();
      _builder_10.append("  ");
      _builder_10.append("commons:");
      _builder_10.newLine();
      _builder_10.append("    ");
      _builder_10.append("build:");
      _builder_10.newLine();
      _builder_10.append("      ");
      _builder_10.append("context: ./commons");
      _builder_10.newLine();
      _builder_10.append("  ");
      _builder_10.append("python:");
      _builder_10.newLine();
      _builder_10.append("    ");
      _builder_10.append("build:");
      _builder_10.newLine();
      _builder_10.append("      ");
      _builder_10.append("context: ./python");
      _builder_10.newLine();
      Pair<String, String> _mappedTo_4 = Pair.<String, String>of(_builder_9.toString(), _builder_10.toString());
      StringConcatenation _builder_11 = new StringConcatenation();
      _builder_11.append("/myProject/./src-gen/uuu/java/Dockerfile");
      StringConcatenation _builder_12 = new StringConcatenation();
      _builder_12.append("FROM maven");
      _builder_12.newLine();
      _builder_12.append("COPY . /project");
      _builder_12.newLine();
      _builder_12.append("COPY ./inputs /inputs");
      _builder_12.newLine();
      _builder_12.append("WORKDIR project");
      _builder_12.newLine();
      _builder_12.append("RUN mvn compile");
      _builder_12.newLine();
      _builder_12.append("ENTRYPOINT  mvn -q exec:java -Dexec.mainClass=\"a.b.java.C\"");
      _builder_12.newLine();
      Pair<String, String> _mappedTo_5 = Pair.<String, String>of(_builder_11.toString(), _builder_12.toString());
      StringConcatenation _builder_13 = new StringConcatenation();
      _builder_13.append("/myProject/./src-gen/uuu/java/pom.xml");
      StringConcatenation _builder_14 = new StringConcatenation();
      _builder_14.append("<project>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.append("<modelVersion>4.0.0</modelVersion>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.append("<groupId>uuu</groupId>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.append("<artifactId>a.b.java.C</artifactId>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.append("<version>1</version>");
      _builder_14.newLine();
      _builder_14.append("    ");
      _builder_14.newLine();
      _builder_14.append("      ");
      _builder_14.append("<properties>");
      _builder_14.newLine();
      _builder_14.append("        ");
      _builder_14.append("<maven.compiler.source>1.8</maven.compiler.source>");
      _builder_14.newLine();
      _builder_14.append("        ");
      _builder_14.append("<maven.compiler.target>1.8</maven.compiler.target>");
      _builder_14.newLine();
      _builder_14.append("         ");
      _builder_14.append("<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>");
      _builder_14.newLine();
      _builder_14.append("      ");
      _builder_14.append("</properties>");
      _builder_14.newLine();
      _builder_14.append("</project>");
      _builder_14.newLine();
      Pair<String, String> _mappedTo_6 = Pair.<String, String>of(_builder_13.toString(), _builder_14.toString());
      StringConcatenation _builder_15 = new StringConcatenation();
      _builder_15.append("/myProject/./src-gen/uuu/java/src/main/java/a/b/java/C.java");
      StringConcatenation _builder_16 = new StringConcatenation();
      _builder_16.append("package a.b.java;");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("import java.io.*;");
      _builder_16.newLine();
      _builder_16.append("import java.awt.Point;");
      _builder_16.newLine();
      _builder_16.append("import java.util.HashMap;");
      _builder_16.newLine();
      _builder_16.append("import java.util.Scanner;");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("public class C {");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("private HashMap<Point, String> _map = new HashMap<Point, String>();");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("private int _cols;");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("private int _rows;");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void open(File file) throws FileNotFoundException, IOException {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("open(file, \',\');");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void open(File file, char delimiter) throws FileNotFoundException, IOException {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("Scanner scanner = new Scanner(file);");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("scanner.useDelimiter(Character.toString(delimiter));");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("while(scanner.hasNextLine()) {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("String[] values = scanner.nextLine().split(Character.toString(delimiter));");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("int col = 0;");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("for ( String value: values ) {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("_map.put(new Point(col, _rows), value);");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("_cols = Math.max(_cols, ++col);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("_rows++;");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("scanner.close();");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void save(File file) throws IOException {");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("save(file, \',\');");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void save(File file, char delimiter) throws IOException {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("FileWriter fw = new FileWriter(file);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("BufferedWriter bw = new BufferedWriter(fw);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("for (int row = 0; row < _rows; row++) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("for (int col = 0; col < _cols; col++) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("Point key = new Point(col, row);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("if (_map.containsKey(key)) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t\t");
      _builder_16.append("bw.write(_map.get(key));");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("if ((col + 1) < _cols) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t\t");
      _builder_16.append("bw.write(delimiter);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("bw.newLine();");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("bw.flush();");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("bw.close();");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public String serialize(final char delimiter) throws IOException {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("final StringBuilder sb = new StringBuilder();");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("for (int row = 0; row < _rows; row++) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("for (int col = 0; col < _cols; col++) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("final Point key = new Point(col, row);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("if (_map.containsKey(key)) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t\t");
      _builder_16.append("sb.append(_map.get(key));");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("if ((col + 1) < _cols) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t\t");
      _builder_16.append("sb.append(delimiter);");
      _builder_16.newLine();
      _builder_16.append("\t\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("sb.append(System.lineSeparator());");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("return sb.toString();");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public String get(int col, int row) {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("String val = \"\";");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("Point key = new Point(col, row);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("if (_map.containsKey(key)) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("val = _map.get(key);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("return val;");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public void put(int col, int row, String value) {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("_map.put(new Point(col, row), value);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("_cols = Math.max(_cols, col+1);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("_rows = Math.max(_rows, row+1);");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public int rows() { return this._rows; }");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("public static void main(String[] args) {");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("try {");
      _builder_16.newLine();
      _builder_16.append("\t\t     \t");
      _builder_16.append("C a = new C();");
      _builder_16.newLine();
      _builder_16.append("\t\t     \t");
      _builder_16.append("a.open(new File(\"/tmp/test.csv\"));");
      _builder_16.newLine();
      _builder_16.append("\t\t     \t");
      _builder_16.append("System.out.println(a.rows());");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("} catch (Exception e) {");
      _builder_16.newLine();
      _builder_16.append("\t\t\t");
      _builder_16.append("System.out.println(e);");
      _builder_16.newLine();
      _builder_16.append("\t\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("\t");
      _builder_16.append("}");
      _builder_16.newLine();
      _builder_16.append("}");
      Pair<String, String> _mappedTo_7 = Pair.<String, String>of(_builder_15.toString(), _builder_16.toString());
      StringConcatenation _builder_17 = new StringConcatenation();
      _builder_17.append("/myProject/./src-gen/uuu/python/Dockerfile");
      StringConcatenation _builder_18 = new StringConcatenation();
      _builder_18.append("FROM python");
      _builder_18.newLine();
      _builder_18.append("COPY . /project");
      _builder_18.newLine();
      _builder_18.append("COPY ./inputs /inputs");
      _builder_18.newLine();
      _builder_18.append("WORKDIR project");
      _builder_18.newLine();
      _builder_18.append("ENTRYPOINT python python_version.py");
      _builder_18.newLine();
      Pair<String, String> _mappedTo_8 = Pair.<String, String>of(_builder_17.toString(), _builder_18.toString());
      StringConcatenation _builder_19 = new StringConcatenation();
      _builder_19.append("/myProject/./src-gen/uuu/python/python_version.py");
      StringConcatenation _builder_20 = new StringConcatenation();
      _builder_20.append("import csv");
      _builder_20.newLine();
      _builder_20.append("print(sum(1 for row in csv.reader(open(\'/tmp/test.csv\', \'rt\', encoding=\'\'))))");
      _builder_20.newLine();
      _builder_20.newLine();
      Pair<String, String> _mappedTo_9 = Pair.<String, String>of(_builder_19.toString(), _builder_20.toString());
      StringConcatenation _builder_21 = new StringConcatenation();
      _builder_21.append("/myProject/./src-gen/uuu/run.sh");
      StringConcatenation _builder_22 = new StringConcatenation();
      _builder_22.append("rm -r ./logs");
      _builder_22.newLine();
      _builder_22.append("mkdir -p ./logs");
      _builder_22.newLine();
      _builder_22.append("docker-compose up");
      _builder_22.newLine();
      _builder_22.newLine();
      Pair<String, String> _mappedTo_10 = Pair.<String, String>of(_builder_21.toString(), _builder_22.toString());
      this._polymorphicCsvCompilationTestHelper.assertFileCompilesTo(_builder, Collections.<String, CharSequence>unmodifiableMap(CollectionLiterals.<String, CharSequence>newHashMap(_mappedTo, _mappedTo_1, _mappedTo_2, _mappedTo_3, _mappedTo_4, _mappedTo_5, _mappedTo_6, _mappedTo_7, _mappedTo_8, _mappedTo_9, _mappedTo_10)));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelBis() {
  }
  
  @Test
  public void loadUnknowLanguage() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package uuu;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("constraints {}");
      _builder.newLine();
      _builder.append("languages {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("jav (a.b.java.C)");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this._validationTestHelper.assertError(this._parseHelper.parse(_builder), CsvPackage.Literals.LANGUAGE, CsvValidator.LANGUAGE_DOES_NOT_EXIST, 
        "Language jav does not exist.");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
