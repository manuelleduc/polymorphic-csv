/**
 * generated by Xtext 2.13.0
 */
package polymorphic.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.Test;
import org.junit.runner.RunWith;
import polymorphic.tests.CsvInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(CsvInjectorProvider.class)
@SuppressWarnings("all")
public class CsvParsingTest {
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("target hello.Csv");
      _builder.newLine();
      _builder.append("language Java");
      _builder.newLine();
      _builder.append("\"/tmp/test.csv\";");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package hello.Csv;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("class Csv {");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelPython() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package foo;");
      _builder.newLine();
      _builder.append("constraints {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("java = true");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("maven = true");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("languages {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("python (a)");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("read a \"/tmp/test.csv\"");
      _builder.newLine();
      _builder.append("nbrow a");
      _builder.newLine();
      _builder.append("//print a");
      _builder.newLine();
      _builder.append("read b \"/tmp/test2.csv\"");
      _builder.newLine();
      _builder.append("nbrow b");
      _builder.newLine();
      _builder.append("//print b");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("import csv");
      _builder_1.newLine();
      _builder_1.append("a = open(\'/tmp/test.csv\', \'rt\')");
      _builder_1.newLine();
      _builder_1.append("a_read = csv.reader(a)");
      _builder_1.newLine();
      _builder_1.append("print(sum(1 for row in a_read))");
      _builder_1.newLine();
      _builder_1.append("b = open(\'/tmp/test2.csv\', \'rt\')");
      _builder_1.newLine();
      _builder_1.append("b_read = csv.reader(b)");
      _builder_1.newLine();
      _builder_1.append("print(sum(1 for row in b_read))");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
