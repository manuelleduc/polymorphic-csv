/*
 * generated by Xtext 2.13.0
 */
package polymorphic.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import polymorphic.csv.Model

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CsvGenerator extends AbstractGenerator {

	private GeneratorCollection generators = new GeneratorCollection

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val content = resource.contents.head as Model
		content.languages.forEach [ language |
			generators.map.get(language.name).generate(content, language, fsa)
		]
  	
    	fsa.generateFile('''«content.name»/docker-compose.yml''', '''
		version: '3'
		services:
		  «FOR l : content.languages»
		  «l.name»:
		    build:
		      context: ./«l.name»
          «ENDFOR»
    	''')
		
		fsa.generateFile('''«content.name»/build.sh''', '''
		#!/bin/bash
		mkdir -p ./inputs
		«FOR l : content.languages»
			rm -r ./«l.name»/inputs
			cp -r ./inputs ./«l.name»/inputs
	  	«ENDFOR»
		docker-compose build
		''')
		
		fsa.generateFile('''«content.name»/run.sh''', '''
		#!/bin/bash
		rm -r ./logs
		mkdir -p ./logs
		docker-compose up
		''')
		
		fsa.generateFile('''«content.name»/exec.sh''', '''
		#!/bin/bash
		
		# local exec.sh «content.name»
		# syntax : bash exec.sh
		
		# path of "code_X"" for main call / local call
		if [ "$1" = "main" ] ; then path1="./data/«content.name»/" ; else path1="../../data/«content.name»/" ; fi
		
		# for each folder in directory
		for D in $path1*/
		do
		
			# data's name for main call / local call
			if [ "$1" = "main" ] ; then dataNb=${D:14:-1} ; else dataNb=${D:18:-1} ; fi

			# path of the results' file	
			target=$D"result_«content.name»_"$dataNb
		
			printf "////////////////////////////// " >> $target
			date >> $target
			uname -a >> $target
			echo "" >> $target
			echo "## «content.name» ##" >> $target
			echo "" >> $target
			echo "########## $dataNb"
			
			# path for main call / path for local call
			if [ "$1" = "main" ] ; then path2="./src-gen/«content.name»" ; else path2="./" ; fi

			# for each mentioned language
			«FOR l : content.languages»
				echo "# «l.name» #"
				echo "# «l.name» #" >> $target
				echo "" >> $target
				«bash_command(l.name)»"${path2}"/«l.name»/«l.target».«file_extension(l.name)» $D >> $target
				echo "" >> $target
				echo "# END «l.name» #" >> $target
				echo "# END «l.name» #"
				echo ""
				echo "----------------------------------------" >> $target
				
			«ENDFOR»
		
		done
		''')
	}
	
	private def bash_command(String language) {
		val command = language
		switch command {
			case 'bash': ''
			case 'bash_awk': ''
			case 'R': 'Rscript '
			case 'R_fwrite': 'Rscript '
			case 'python3': 'python3 '
			default: '#'
		}
	}
	
	private def file_extension(String language) {
		val dot_extension = language
		switch dot_extension {
			case 'bash': 'sh'
			case 'bash_awk': 'sh'
			case 'R': 'R'
			case 'R_fwrite': 'R'
			case 'python3': 'py'
			default: '#'
		}
	}

}
