/*
 * generated by Xtext 2.12.0
 */
package polymorphic.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CsvGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polymorphic.Csv.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLanguagesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLanguagesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLanguagesLanguageParserRuleCall_6_0 = (RuleCall)cLanguagesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cActionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cActionsActionParserRuleCall_8_0 = (RuleCall)cActionsAssignment_8.eContents().get(0);
		
		//Model:
		//	{Model}
		//	'package' name=ID ';'
		//	//	'constraints' '{'
		//	//	constraints+=Constraint*
		//	//	'}'
		//	'languages' '{'
		//	languages+=Language*
		//	'}'
		//	actions+=Action*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} 'package' name=ID ';' //	'constraints' '{'
		////	constraints+=Constraint*
		////	'}'
		//'languages' '{' languages+=Language* '}' actions+=Action*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		////	'constraints' '{'
		////	constraints+=Constraint*
		////	'}'
		//'languages'
		public Keyword getLanguagesKeyword_4() { return cLanguagesKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//languages+=Language*
		public Assignment getLanguagesAssignment_6() { return cLanguagesAssignment_6; }
		
		//Language
		public RuleCall getLanguagesLanguageParserRuleCall_6_0() { return cLanguagesLanguageParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_8() { return cActionsAssignment_8; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_8_0() { return cActionsActionParserRuleCall_8_0; }
	}
	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polymorphic.Csv.Language");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetQualifiedNameParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////
		////Constraint:
		////	name=ID '=' (true?='true' | 'false');
		//Language:
		//	name=ID '(' target=QualifiedName ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' target=QualifiedName ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//target=QualifiedName
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//QualifiedName
		public RuleCall getTargetQualifiedNameParserRuleCall_2_0() { return cTargetQualifiedNameParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polymorphic.Csv.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenCSVParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefOpenActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action:
		//	OpenCSV | RefOpenAction;
		@Override public ParserRule getRule() { return rule; }
		
		//OpenCSV | RefOpenAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OpenCSV
		public RuleCall getOpenCSVParserRuleCall_0() { return cOpenCSVParserRuleCall_0; }
		
		//RefOpenAction
		public RuleCall getRefOpenActionParserRuleCall_1() { return cRefOpenActionParserRuleCall_1; }
	}
	public class OpenCSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polymorphic.Csv.OpenCSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpenCSVAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cFileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFileSTRINGTerminalRuleCall_3_0 = (RuleCall)cFileAssignment_3.eContents().get(0);
		private final Assignment cCharsetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cCharsetAlternatives_4_0 = (Alternatives)cCharsetAssignment_4.eContents().get(0);
		private final Keyword cCharsetLatin1Keyword_4_0_0 = (Keyword)cCharsetAlternatives_4_0.eContents().get(0);
		private final Keyword cCharsetUtf8Keyword_4_0_1 = (Keyword)cCharsetAlternatives_4_0.eContents().get(1);
		private final Keyword cHeaderKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cHeaderAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final Keyword cHeaderTrueKeyword_7_0_0 = (Keyword)cHeaderAssignment_7_0.eContents().get(0);
		private final Keyword cFalseKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//OpenCSV:
		//	{OpenCSV} 'read' name=ID file=STRING charset=('latin1' | 'utf8') 'header' '=' (header?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{OpenCSV} 'read' name=ID file=STRING charset=('latin1' | 'utf8') 'header' '=' (header?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{OpenCSV}
		public Action getOpenCSVAction_0() { return cOpenCSVAction_0; }
		
		//'read'
		public Keyword getReadKeyword_1() { return cReadKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//file=STRING
		public Assignment getFileAssignment_3() { return cFileAssignment_3; }
		
		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_3_0() { return cFileSTRINGTerminalRuleCall_3_0; }
		
		//charset=('latin1' | 'utf8')
		public Assignment getCharsetAssignment_4() { return cCharsetAssignment_4; }
		
		//('latin1' | 'utf8')
		public Alternatives getCharsetAlternatives_4_0() { return cCharsetAlternatives_4_0; }
		
		//'latin1'
		public Keyword getCharsetLatin1Keyword_4_0_0() { return cCharsetLatin1Keyword_4_0_0; }
		
		//'utf8'
		public Keyword getCharsetUtf8Keyword_4_0_1() { return cCharsetUtf8Keyword_4_0_1; }
		
		//'header'
		public Keyword getHeaderKeyword_5() { return cHeaderKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//header?='true' | 'false'
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//header?='true'
		public Assignment getHeaderAssignment_7_0() { return cHeaderAssignment_7_0; }
		
		//'true'
		public Keyword getHeaderTrueKeyword_7_0_0() { return cHeaderTrueKeyword_7_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_7_1() { return cFalseKeyword_7_1; }
	}
	public class RefOpenActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polymorphic.Csv.RefOpenAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrintCSVParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNbRowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNbColParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSaveCSVParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//RefOpenAction:
		//	PrintCSV | NbRow | NbCol | SaveCSV;
		@Override public ParserRule getRule() { return rule; }
		
		//PrintCSV | NbRow | NbCol | SaveCSV
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrintCSV
		public RuleCall getPrintCSVParserRuleCall_0() { return cPrintCSVParserRuleCall_0; }
		
		//NbRow
		public RuleCall getNbRowParserRuleCall_1() { return cNbRowParserRuleCall_1; }
		
		//NbCol
		public RuleCall getNbColParserRuleCall_2() { return cNbColParserRuleCall_2; }
		
		//SaveCSV
		public RuleCall getSaveCSVParserRuleCall_3() { return cSaveCSVParserRuleCall_3; }
	}
	public class PrintCSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polymorphic.Csv.PrintCSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintCSVAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOpenOpenCSVCrossReference_2_0 = (CrossReference)cOpenAssignment_2.eContents().get(0);
		private final RuleCall cOpenOpenCSVIDTerminalRuleCall_2_0_1 = (RuleCall)cOpenOpenCSVCrossReference_2_0.eContents().get(1);
		
		//PrintCSV:
		//	{PrintCSV} 'print' open=[OpenCSV];
		@Override public ParserRule getRule() { return rule; }
		
		//{PrintCSV} 'print' open=[OpenCSV]
		public Group getGroup() { return cGroup; }
		
		//{PrintCSV}
		public Action getPrintCSVAction_0() { return cPrintCSVAction_0; }
		
		//'print'
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//open=[OpenCSV]
		public Assignment getOpenAssignment_2() { return cOpenAssignment_2; }
		
		//[OpenCSV]
		public CrossReference getOpenOpenCSVCrossReference_2_0() { return cOpenOpenCSVCrossReference_2_0; }
		
		//ID
		public RuleCall getOpenOpenCSVIDTerminalRuleCall_2_0_1() { return cOpenOpenCSVIDTerminalRuleCall_2_0_1; }
	}
	public class NbRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polymorphic.Csv.NbRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNbRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNbrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOpenOpenCSVCrossReference_2_0 = (CrossReference)cOpenAssignment_2.eContents().get(0);
		private final RuleCall cOpenOpenCSVIDTerminalRuleCall_2_0_1 = (RuleCall)cOpenOpenCSVCrossReference_2_0.eContents().get(1);
		
		//NbRow:
		//	{NbRow} 'nbrow' open=[OpenCSV];
		@Override public ParserRule getRule() { return rule; }
		
		//{NbRow} 'nbrow' open=[OpenCSV]
		public Group getGroup() { return cGroup; }
		
		//{NbRow}
		public Action getNbRowAction_0() { return cNbRowAction_0; }
		
		//'nbrow'
		public Keyword getNbrowKeyword_1() { return cNbrowKeyword_1; }
		
		//open=[OpenCSV]
		public Assignment getOpenAssignment_2() { return cOpenAssignment_2; }
		
		//[OpenCSV]
		public CrossReference getOpenOpenCSVCrossReference_2_0() { return cOpenOpenCSVCrossReference_2_0; }
		
		//ID
		public RuleCall getOpenOpenCSVIDTerminalRuleCall_2_0_1() { return cOpenOpenCSVIDTerminalRuleCall_2_0_1; }
	}
	public class NbColElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polymorphic.Csv.NbCol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNbColAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNbcolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOpenOpenCSVCrossReference_2_0 = (CrossReference)cOpenAssignment_2.eContents().get(0);
		private final RuleCall cOpenOpenCSVIDTerminalRuleCall_2_0_1 = (RuleCall)cOpenOpenCSVCrossReference_2_0.eContents().get(1);
		
		//NbCol:
		//	{NbCol} 'nbcol' open=[OpenCSV];
		@Override public ParserRule getRule() { return rule; }
		
		//{NbCol} 'nbcol' open=[OpenCSV]
		public Group getGroup() { return cGroup; }
		
		//{NbCol}
		public Action getNbColAction_0() { return cNbColAction_0; }
		
		//'nbcol'
		public Keyword getNbcolKeyword_1() { return cNbcolKeyword_1; }
		
		//open=[OpenCSV]
		public Assignment getOpenAssignment_2() { return cOpenAssignment_2; }
		
		//[OpenCSV]
		public CrossReference getOpenOpenCSVCrossReference_2_0() { return cOpenOpenCSVCrossReference_2_0; }
		
		//ID
		public RuleCall getOpenOpenCSVIDTerminalRuleCall_2_0_1() { return cOpenOpenCSVIDTerminalRuleCall_2_0_1; }
	}
	public class SaveCSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "polymorphic.Csv.SaveCSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSaveCSVAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSaveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOpenOpenCSVCrossReference_2_0 = (CrossReference)cOpenAssignment_2.eContents().get(0);
		private final RuleCall cOpenOpenCSVIDTerminalRuleCall_2_0_1 = (RuleCall)cOpenOpenCSVCrossReference_2_0.eContents().get(1);
		private final Assignment cFileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFileSTRINGTerminalRuleCall_3_0 = (RuleCall)cFileAssignment_3.eContents().get(0);
		
		//SaveCSV:
		//	{SaveCSV} 'save' open=[OpenCSV] file=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SaveCSV} 'save' open=[OpenCSV] file=STRING?
		public Group getGroup() { return cGroup; }
		
		//{SaveCSV}
		public Action getSaveCSVAction_0() { return cSaveCSVAction_0; }
		
		//'save'
		public Keyword getSaveKeyword_1() { return cSaveKeyword_1; }
		
		//open=[OpenCSV]
		public Assignment getOpenAssignment_2() { return cOpenAssignment_2; }
		
		//[OpenCSV]
		public CrossReference getOpenOpenCSVCrossReference_2_0() { return cOpenOpenCSVCrossReference_2_0; }
		
		//ID
		public RuleCall getOpenOpenCSVIDTerminalRuleCall_2_0_1() { return cOpenOpenCSVIDTerminalRuleCall_2_0_1; }
		
		//file=STRING?
		public Assignment getFileAssignment_3() { return cFileAssignment_3; }
		
		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_3_0() { return cFileSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final LanguageElements pLanguage;
	private final ActionElements pAction;
	private final OpenCSVElements pOpenCSV;
	private final RefOpenActionElements pRefOpenAction;
	private final PrintCSVElements pPrintCSV;
	private final NbRowElements pNbRow;
	private final NbColElements pNbCol;
	private final SaveCSVElements pSaveCSV;
	
	private final Grammar grammar;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public CsvGrammarAccess(GrammarProvider grammarProvider,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pLanguage = new LanguageElements();
		this.pAction = new ActionElements();
		this.pOpenCSV = new OpenCSVElements();
		this.pRefOpenAction = new RefOpenActionElements();
		this.pPrintCSV = new PrintCSVElements();
		this.pNbRow = new NbRowElements();
		this.pNbCol = new NbColElements();
		this.pSaveCSV = new SaveCSVElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("polymorphic.Csv".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model:
	//	{Model}
	//	'package' name=ID ';'
	//	//	'constraints' '{'
	//	//	constraints+=Constraint*
	//	//	'}'
	//	'languages' '{'
	//	languages+=Language*
	//	'}'
	//	actions+=Action*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////
	////Constraint:
	////	name=ID '=' (true?='true' | 'false');
	//Language:
	//	name=ID '(' target=QualifiedName ')';
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}
	
	//Action:
	//	OpenCSV | RefOpenAction;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//OpenCSV:
	//	{OpenCSV} 'read' name=ID file=STRING charset=('latin1' | 'utf8') 'header' '=' (header?='true' | 'false');
	public OpenCSVElements getOpenCSVAccess() {
		return pOpenCSV;
	}
	
	public ParserRule getOpenCSVRule() {
		return getOpenCSVAccess().getRule();
	}
	
	//RefOpenAction:
	//	PrintCSV | NbRow | NbCol | SaveCSV;
	public RefOpenActionElements getRefOpenActionAccess() {
		return pRefOpenAction;
	}
	
	public ParserRule getRefOpenActionRule() {
		return getRefOpenActionAccess().getRule();
	}
	
	//PrintCSV:
	//	{PrintCSV} 'print' open=[OpenCSV];
	public PrintCSVElements getPrintCSVAccess() {
		return pPrintCSV;
	}
	
	public ParserRule getPrintCSVRule() {
		return getPrintCSVAccess().getRule();
	}
	
	//NbRow:
	//	{NbRow} 'nbrow' open=[OpenCSV];
	public NbRowElements getNbRowAccess() {
		return pNbRow;
	}
	
	public ParserRule getNbRowRule() {
		return getNbRowAccess().getRule();
	}
	
	//NbCol:
	//	{NbCol} 'nbcol' open=[OpenCSV];
	public NbColElements getNbColAccess() {
		return pNbCol;
	}
	
	public ParserRule getNbColRule() {
		return getNbColAccess().getRule();
	}
	
	//SaveCSV:
	//	{SaveCSV} 'save' open=[OpenCSV] file=STRING?;
	public SaveCSVElements getSaveCSVAccess() {
		return pSaveCSV;
	}
	
	public ParserRule getSaveCSVRule() {
		return getSaveCSVAccess().getRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)*
	//	'>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=> '<' arguments+=JvmArgumentTypeReference
	//	(',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID ('.' ValidID)*;
	public XtypeGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXtype.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
