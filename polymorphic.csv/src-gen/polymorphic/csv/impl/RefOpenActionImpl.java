/**
 * generated by Xtext 2.12.0
 */
package polymorphic.csv.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import polymorphic.csv.CsvPackage;
import polymorphic.csv.OpenCSV;
import polymorphic.csv.RefOpenAction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ref Open Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link polymorphic.csv.impl.RefOpenActionImpl#getOpen <em>Open</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RefOpenActionImpl extends ActionImpl implements RefOpenAction
{
  /**
   * The cached value of the '{@link #getOpen() <em>Open</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpen()
   * @generated
   * @ordered
   */
  protected OpenCSV open;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RefOpenActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CsvPackage.Literals.REF_OPEN_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OpenCSV getOpen()
  {
    if (open != null && open.eIsProxy())
    {
      InternalEObject oldOpen = (InternalEObject)open;
      open = (OpenCSV)eResolveProxy(oldOpen);
      if (open != oldOpen)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CsvPackage.REF_OPEN_ACTION__OPEN, oldOpen, open));
      }
    }
    return open;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OpenCSV basicGetOpen()
  {
    return open;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOpen(OpenCSV newOpen)
  {
    OpenCSV oldOpen = open;
    open = newOpen;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvPackage.REF_OPEN_ACTION__OPEN, oldOpen, open));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CsvPackage.REF_OPEN_ACTION__OPEN:
        if (resolve) return getOpen();
        return basicGetOpen();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CsvPackage.REF_OPEN_ACTION__OPEN:
        setOpen((OpenCSV)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CsvPackage.REF_OPEN_ACTION__OPEN:
        setOpen((OpenCSV)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CsvPackage.REF_OPEN_ACTION__OPEN:
        return open != null;
    }
    return super.eIsSet(featureID);
  }

} //RefOpenActionImpl
