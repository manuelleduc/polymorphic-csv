/**
 * generated by Xtext 2.13.0
 */
package polymorphic.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.formatting2.XtypeFormatter;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import polymorphic.csv.Action;
import polymorphic.csv.Constraint;
import polymorphic.csv.Language;
import polymorphic.csv.Model;
import polymorphic.services.CsvGrammarAccess;

@SuppressWarnings("all")
public class CsvFormatter extends XtypeFormatter {
  @Inject
  @Extension
  private CsvGrammarAccess _csvGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Constraint> _constraints = model.getConstraints();
    for (final Constraint constraint : _constraints) {
      document.<Constraint>format(constraint);
    }
    EList<Language> _languages = model.getLanguages();
    for (final Language language : _languages) {
      document.<Language>format(language);
    }
    EList<Action> _actions = model.getActions();
    for (final Action action : _actions) {
      document.<Action>format(action);
    }
  }
  
  public void format(final Object model, final IFormattableDocument document) {
    if (model instanceof JvmTypeParameter) {
      _format((JvmTypeParameter)model, document);
      return;
    } else if (model instanceof XtextResource) {
      _format((XtextResource)model, document);
      return;
    } else if (model instanceof XFunctionTypeRef) {
      _format((XFunctionTypeRef)model, document);
      return;
    } else if (model instanceof JvmParameterizedTypeReference) {
      _format((JvmParameterizedTypeReference)model, document);
      return;
    } else if (model instanceof JvmWildcardTypeReference) {
      _format((JvmWildcardTypeReference)model, document);
      return;
    } else if (model instanceof XImportDeclaration) {
      _format((XImportDeclaration)model, document);
      return;
    } else if (model instanceof XImportSection) {
      _format((XImportSection)model, document);
      return;
    } else if (model instanceof Model) {
      _format((Model)model, document);
      return;
    } else if (model instanceof EObject) {
      _format((EObject)model, document);
      return;
    } else if (model == null) {
      _format((Void)null, document);
      return;
    } else if (model != null) {
      _format(model, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(model, document).toString());
    }
  }
}
