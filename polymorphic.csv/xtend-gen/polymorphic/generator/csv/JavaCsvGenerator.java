package polymorphic.generator.csv;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import polymorphic.csv.Actions;
import polymorphic.csv.Language;
import polymorphic.csv.Model;
import polymorphic.csv.OpenCSV;
import polymorphic.csv.PrintCSV;
import polymorphic.generator.csv.ICsvGenerator;

@SuppressWarnings("all")
public class JavaCsvGenerator implements ICsvGenerator {
  @Override
  public void generate(final Model content, final Language language, final IFileSystemAccess2 fsa) {
    final String className = IterableExtensions.<String>head(ListExtensions.<String>reverse(((List<String>)Conversions.doWrapArray(language.getTarget().split("\\.")))));
    final String package_ = IterableExtensions.join(ListExtensions.<String>reverse(IterableExtensions.<String>toList(IterableExtensions.<String>tail(ListExtensions.<String>reverse(((List<String>)Conversions.doWrapArray(language.getTarget().split("\\."))))))), ".");
    StringConcatenation _builder = new StringConcatenation();
    String _replaceAll = language.getTarget().replaceAll("\\.", "/");
    _builder.append(_replaceAll);
    _builder.append(".java");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package ");
    _builder_1.append(package_);
    _builder_1.append(";");
    _builder_1.newLineIfNotEmpty();
    _builder_1.newLine();
    _builder_1.append("import java.io.*;");
    _builder_1.newLine();
    _builder_1.append("import java.awt.Point;");
    _builder_1.newLine();
    _builder_1.append("import java.util.HashMap;");
    _builder_1.newLine();
    _builder_1.append("import java.util.Scanner;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class ");
    _builder_1.append(className);
    _builder_1.append(" {");
    _builder_1.newLineIfNotEmpty();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private HashMap<Point, String> _map = new HashMap<Point, String>();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private int _cols;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private int _rows;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void open(File file) throws FileNotFoundException, IOException {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("open(file, \',\');");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void open(File file, char delimiter) throws FileNotFoundException, IOException {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("Scanner scanner = new Scanner(file);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("scanner.useDelimiter(Character.toString(delimiter));");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("clear();");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("while(scanner.hasNextLine()) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("String[] values = scanner.nextLine().split(Character.toString(delimiter));");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("int col = 0;");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("for ( String value: values ) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("_map.put(new Point(col, _rows), value);");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("_cols = Math.max(_cols, ++col);");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("_rows++;");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("scanner.close();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void save(File file) throws IOException {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("save(file, \',\');");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void save(File file, char delimiter) throws IOException {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("FileWriter fw = new FileWriter(file);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("BufferedWriter bw = new BufferedWriter(fw);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("for (int row = 0; row < _rows; row++) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("for (int col = 0; col < _cols; col++) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("Point key = new Point(col, row);");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("if (_map.containsKey(key)) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t\t");
    _builder_1.append("bw.write(_map.get(key));");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("if ((col + 1) < _cols) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t\t");
    _builder_1.append("bw.write(delimiter);");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("bw.newLine();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("bw.flush();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("bw.close();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public String serialize(final char delimiter) throws IOException {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("final StringBuilder sb = new StringBuilder();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("for (int row = 0; row < _rows; row++) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("for (int col = 0; col < _cols; col++) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("final Point key = new Point(col, row);");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("if (_map.containsKey(key)) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t\t");
    _builder_1.append("sb.append(_map.get(key));");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("if ((col + 1) < _cols) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t\t");
    _builder_1.append("sb.append(delimiter);");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("sb.append(System.lineSeparator());");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return sb.toString();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public String get(int col, int row) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("String val = \"\";");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("Point key = new Point(col, row);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("if (_map.containsKey(key)) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("val = _map.get(key);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return val;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void put(int col, int row, String value) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("_map.put(new Point(col, row), value);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("_cols = Math.max(_cols, col+1);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("_rows = Math.max(_rows, row+1);");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void clear() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("_map.clear();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("_cols = 0;");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("_rows = 0;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public int rows() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return _rows;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public int cols() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return _cols;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public static void main(String[] args) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("try {");
    _builder_1.newLine();
    {
      EList<Actions> _actions = content.getActions();
      for(final Actions action : _actions) {
        _builder_1.append("\t\t        \t");
        CharSequence _javaAction = this.javaAction(action, className);
        _builder_1.append(_javaAction, "\t\t        \t");
        _builder_1.newLineIfNotEmpty();
      }
    }
    _builder_1.append("\t\t");
    _builder_1.append("} catch (Exception e) {");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("System.out.println(e);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    fsa.generateFile(_builder.toString(), _builder_1);
  }
  
  protected CharSequence _javaAction(final OpenCSV open, final CharSequence className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(className);
    _builder.append(" ");
    String _name = open.getName();
    _builder.append(_name);
    _builder.append(" = new ");
    _builder.append(className);
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    String _name_1 = open.getName();
    _builder.append(_name_1);
    _builder.append(".open(new File(\"");
    String _file = open.getFile();
    _builder.append(_file);
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _javaAction(final PrintCSV open, final CharSequence className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(");
    String _name = open.getName();
    _builder.append(_name);
    _builder.append(".serialize(\';\'));");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  @Override
  public Map<String, Boolean> properties() {
    Pair<String, Boolean> _mappedTo = Pair.<String, Boolean>of("java", Boolean.valueOf(true));
    return CollectionLiterals.<String, Boolean>newHashMap(_mappedTo);
  }
  
  public CharSequence javaAction(final Actions open, final CharSequence className) {
    if (open instanceof OpenCSV) {
      return _javaAction((OpenCSV)open, className);
    } else if (open instanceof PrintCSV) {
      return _javaAction((PrintCSV)open, className);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(open, className).toString());
    }
  }
}
