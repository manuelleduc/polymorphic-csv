package polymorphic.generator.csv;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import polymorphic.csv.Actions;
import polymorphic.csv.Language;
import polymorphic.csv.Model;
import polymorphic.csv.OpenCSV;
import polymorphic.csv.PrintCSV;
import polymorphic.csv.SaveCSV;
import polymorphic.generator.csv.ICsvGenerator;

@SuppressWarnings("all")
public class ApacheCommonCsvGenerator implements ICsvGenerator {
  @Override
  public void generate(final Model content, final Language language, final IFileSystemAccess2 fsa) {
    final String className = IterableExtensions.<String>head(ListExtensions.<String>reverse(((List<String>)Conversions.doWrapArray(language.getTarget().split("\\.")))));
    final String package_ = IterableExtensions.join(ListExtensions.<String>reverse(IterableExtensions.<String>toList(IterableExtensions.<String>tail(ListExtensions.<String>reverse(((List<String>)Conversions.doWrapArray(language.getTarget().split("\\."))))))), ".");
    StringConcatenation _builder = new StringConcatenation();
    String _replaceAll = language.getTarget().replaceAll("\\.", "/");
    _builder.append(_replaceAll);
    _builder.append(".java");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("/*");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("<dependency>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("<groupId>org.apache.commons</groupId>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("<artifactId>commons-csv</artifactId>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("<version>1.5</version>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("</dependency>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("package ");
    _builder_1.append(package_, "\t");
    _builder_1.append(";");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("import java.io.*;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("import java.util.*;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("import org.apache.commons.csv.*;");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public class ");
    _builder_1.append(className, "\t");
    _builder_1.append(" {");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("\t  ");
    _builder_1.append("private static final String NL = System.getProperty(\"line.separator\");");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t  ");
    _builder_1.append("public static void main(String[] args) throws FileNotFoundException, IOException {");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.newLine();
    {
      EList<Actions> _actions = content.getActions();
      for(final Actions action : _actions) {
        CharSequence _javaAction = this.javaAction(action, className);
        _builder_1.append(_javaAction);
        _builder_1.newLineIfNotEmpty();
      }
    }
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("public static void processCsv(Reader iCvs, Writer oCvs, String COL_NAME_SUM) throws IOException {");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("CSVPrinter printer = null;");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("printer = new CSVPrinter(oCvs, CSVFormat.DEFAULT.withRecordSeparator(NL));");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("List<String> oCvsHeaders;");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("List<String> oCvsRecord;");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("CSVParser records = CSVFormat.DEFAULT.withHeader().parse(iCvs);");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("Map<String, Integer> irHeader = records.getHeaderMap();");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("oCvsHeaders = new ArrayList<String>(Arrays.asList((irHeader.keySet()).toArray(new String[0])));");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("oCvsHeaders.add(COL_NAME_SUM);");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("printer.printRecord(oCvsHeaders);");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("for (CSVRecord record : records) {");
    _builder_1.newLine();
    _builder_1.append("\t        ");
    _builder_1.append("oCvsRecord = record2list(record, oCvsHeaders, COL_NAME_SUM);");
    _builder_1.newLine();
    _builder_1.append("\t        ");
    _builder_1.append("printer.printRecord(oCvsRecord);");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("if (printer != null) {");
    _builder_1.newLine();
    _builder_1.append("\t        ");
    _builder_1.append("printer.close();");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("private static List<String> record2list(CSVRecord record, List<String> oCvsHeaders, String COL_NAME_SUM) {");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("List<String> cvsRecord;");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("Map<String, String> rMap = record.toMap();");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("long recNo = record.getRecordNumber();");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("rMap = alterRecord(rMap, recNo);");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("int sum = 0;");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("sum = summation(rMap);");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("rMap.put(COL_NAME_SUM, String.valueOf(sum));");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("cvsRecord = new ArrayList<String>();");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("for (String key : oCvsHeaders) {");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("cvsRecord.add(rMap.get(key));");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("return cvsRecord;");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("private static Map<String, String> alterRecord(Map<String, String> rMap, long recNo) {");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("int rv;");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("Random rg = new Random(recNo);");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("rv = rg.nextInt(50);");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("String[] ks = rMap.keySet().toArray(new String[0]);");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("int ix = rg.nextInt(ks.length);");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("long yv = 0;");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("String ky = ks[ix];");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("String xv = rMap.get(ky);");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("if (xv != null && xv.length() > 0) {");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("yv = Long.valueOf(xv) + rv;");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("rMap.put(ks[ix], String.valueOf(yv));");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("return rMap;");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("private static int summation(Map<String, String> rMap) {");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("int sum = 0;");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("for (String col : rMap.keySet()) {");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("String nv = rMap.get(col);");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("sum += nv != null && nv.length() > 0 ? Integer.valueOf(nv) : 0;");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("return sum;");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("private static String textFileContentsToString(String filename) {");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("StringBuilder lineOut = new StringBuilder();");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("Scanner fs = null;");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("fs = new Scanner(new File(filename));");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("lineOut.append(filename);");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("lineOut.append(NL);");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("while (fs.hasNextLine()) {");
    _builder_1.newLine();
    _builder_1.append("\t        ");
    _builder_1.append("String line = fs.nextLine();");
    _builder_1.newLine();
    _builder_1.append("\t        ");
    _builder_1.append("lineOut.append(line);");
    _builder_1.newLine();
    _builder_1.append("\t        ");
    _builder_1.append("lineOut.append(NL);");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("catch (FileNotFoundException ex) {");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("// TODO Auto-generated catch block");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("ex.printStackTrace();");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("if (fs != null) {");
    _builder_1.newLine();
    _builder_1.append("\t        ");
    _builder_1.append("fs.close();");
    _builder_1.newLine();
    _builder_1.append("\t      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t    ");
    _builder_1.append("return lineOut.toString();");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    fsa.generateFile(_builder.toString(), _builder_1);
  }
  
  protected CharSequence _javaAction(final OpenCSV open, final CharSequence className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("final Iterable<CSVRecord> ");
    String _name = open.getName();
    _builder.append(_name);
    _builder.append(" = CSVFormat.RFC4180.parse(new FileReader(\"");
    String _file = open.getFile();
    _builder.append(_file);
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _javaAction(final PrintCSV open, final CharSequence className) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = open.getName();
    _builder.append(_name);
    _builder.append(".stream().forEach(x -> System.out.println(x));");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _javaAction(final SaveCSV save, final CharSequence className) {
    CharSequence _xblockexpression = null;
    {
      String _xifexpression = null;
      String _file = save.getFile();
      boolean _tripleNotEquals = (_file != null);
      if (_tripleNotEquals) {
        _xifexpression = save.getFile();
      } else {
        final Function1<OpenCSV, Boolean> _function = (OpenCSV it) -> {
          String _name = it.getName();
          String _name_1 = save.getName();
          return Boolean.valueOf(Objects.equal(_name, _name_1));
        };
        _xifexpression = IterableExtensions.<OpenCSV>head(IterableExtensions.<OpenCSV>filter(Iterables.<OpenCSV>filter(EcoreUtil2.<Model>getContainerOfType(save, Model.class).getActions(), OpenCSV.class), _function)).getFile();
      }
      final String file = _xifexpression;
      StringConcatenation _builder = new StringConcatenation();
      String _name = save.getName();
      _builder.append(_name);
      _builder.append(".save(new File(\"");
      _builder.append(file);
      _builder.append("\"));");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  @Override
  public Map<String, Boolean> properties() {
    Pair<String, Boolean> _mappedTo = Pair.<String, Boolean>of("java", Boolean.valueOf(true));
    Pair<String, Boolean> _mappedTo_1 = Pair.<String, Boolean>of("maven", Boolean.valueOf(true));
    return CollectionLiterals.<String, Boolean>newHashMap(_mappedTo, _mappedTo_1);
  }
  
  public CharSequence javaAction(final Actions open, final CharSequence className) {
    if (open instanceof OpenCSV) {
      return _javaAction((OpenCSV)open, className);
    } else if (open instanceof PrintCSV) {
      return _javaAction((PrintCSV)open, className);
    } else if (open instanceof SaveCSV) {
      return _javaAction((SaveCSV)open, className);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(open, className).toString());
    }
  }
}
