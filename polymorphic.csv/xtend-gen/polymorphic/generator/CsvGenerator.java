/**
 * generated by Xtext 2.13.0
 */
package polymorphic.generator;

import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import polymorphic.csv.Language;
import polymorphic.csv.Model;
import polymorphic.generator.GeneratorCollection;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CsvGenerator extends AbstractGenerator {
  private GeneratorCollection generators = new GeneratorCollection();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model content = ((Model) _head);
    final Consumer<Language> _function = (Language language) -> {
      this.generators.getMap().get(language.getName().toLowerCase()).generate(content, language, fsa);
    };
    content.getLanguages().forEach(_function);
    StringConcatenation _builder = new StringConcatenation();
    String _name = content.getName();
    _builder.append(_name);
    _builder.append("/docker-compose.yml");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("version: \'3\'");
    _builder_1.newLine();
    _builder_1.append("services:");
    _builder_1.newLine();
    {
      EList<Language> _languages = content.getLanguages();
      for(final Language l : _languages) {
        _builder_1.append("  ");
        String _name_1 = l.getName();
        _builder_1.append(_name_1, "  ");
        _builder_1.append(":");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("  ");
        _builder_1.append("  ");
        _builder_1.append("build:");
        _builder_1.newLine();
        _builder_1.append("  ");
        _builder_1.append("    ");
        _builder_1.append("context: ./");
        String _name_2 = l.getName();
        _builder_1.append(_name_2, "      ");
        _builder_1.newLineIfNotEmpty();
      }
    }
    fsa.generateFile(_builder.toString(), _builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    String _name_3 = content.getName();
    _builder_2.append(_name_3);
    _builder_2.append("/build.sh");
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("mkdir -p ./inputs");
    _builder_3.newLine();
    {
      EList<Language> _languages_1 = content.getLanguages();
      for(final Language l_1 : _languages_1) {
        _builder_3.append("rm -r ./");
        String _name_4 = l_1.getName();
        _builder_3.append(_name_4);
        _builder_3.append("/inputs");
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("cp -r ./inputs ./");
        String _name_5 = l_1.getName();
        _builder_3.append(_name_5);
        _builder_3.append("/inputs");
        _builder_3.newLineIfNotEmpty();
      }
    }
    _builder_3.append("docker-compose build");
    _builder_3.newLine();
    fsa.generateFile(_builder_2.toString(), _builder_3);
    StringConcatenation _builder_4 = new StringConcatenation();
    String _name_6 = content.getName();
    _builder_4.append(_name_6);
    _builder_4.append("/run.sh");
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("rm -r ./logs");
    _builder_5.newLine();
    _builder_5.append("mkdir -p ./logs");
    _builder_5.newLine();
    _builder_5.append("docker-compose up");
    _builder_5.newLine();
    fsa.generateFile(_builder_4.toString(), _builder_5);
  }
}
