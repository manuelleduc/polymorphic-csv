/**
 * generated by Xtext 2.13.0
 */
package polymorphic.generator;

import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import polymorphic.csv.Model;
import polymorphic.generator.ApacheCommonCsvGenerator;
import polymorphic.generator.JavaCsvGenerator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CsvGenerator extends AbstractGenerator {
  @Inject
  private JavaCsvGenerator java;
  
  @Inject
  private ApacheCommonCsvGenerator apacheCommon;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model content = ((Model) _head);
    String _lowerCase = content.getLanguage().toLowerCase();
    if (_lowerCase != null) {
      switch (_lowerCase) {
        case "java":
          this.java.generate(content, fsa);
          break;
        case "apache_common":
          this.apacheCommon.generate(content, fsa);
          break;
      }
    }
  }
}
