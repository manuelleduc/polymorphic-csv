/**
 * generated by Xtext 2.13.0
 */
package polymorphic.generator;

import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import polymorphic.csv.Language;
import polymorphic.csv.Model;
import polymorphic.generator.GeneratorCollection;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CsvGenerator extends AbstractGenerator {
  private GeneratorCollection generators = new GeneratorCollection();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model content = ((Model) _head);
    final Consumer<Language> _function = (Language language) -> {
      this.generators.getMap().get(language.getName()).generate(content, language, fsa);
    };
    content.getLanguages().forEach(_function);
    StringConcatenation _builder = new StringConcatenation();
    String _name = content.getName();
    _builder.append(_name);
    _builder.append("/docker-compose.yml");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("version: \'3\'");
    _builder_1.newLine();
    _builder_1.append("services:");
    _builder_1.newLine();
    {
      EList<Language> _languages = content.getLanguages();
      for(final Language l : _languages) {
        _builder_1.append("  ");
        String _name_1 = l.getName();
        _builder_1.append(_name_1, "  ");
        _builder_1.append(":");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("  ");
        _builder_1.append("  ");
        _builder_1.append("build:");
        _builder_1.newLine();
        _builder_1.append("  ");
        _builder_1.append("    ");
        _builder_1.append("context: ./");
        String _name_2 = l.getName();
        _builder_1.append(_name_2, "      ");
        _builder_1.newLineIfNotEmpty();
      }
    }
    fsa.generateFile(_builder.toString(), _builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    String _name_3 = content.getName();
    _builder_2.append(_name_3);
    _builder_2.append("/build.sh");
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("#!/bin/bash");
    _builder_3.newLine();
    _builder_3.append("mkdir -p ./inputs");
    _builder_3.newLine();
    {
      EList<Language> _languages_1 = content.getLanguages();
      for(final Language l_1 : _languages_1) {
        _builder_3.append("rm -r ./");
        String _name_4 = l_1.getName();
        _builder_3.append(_name_4);
        _builder_3.append("/inputs");
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("cp -r ./inputs ./");
        String _name_5 = l_1.getName();
        _builder_3.append(_name_5);
        _builder_3.append("/inputs");
        _builder_3.newLineIfNotEmpty();
      }
    }
    _builder_3.append("docker-compose build");
    _builder_3.newLine();
    fsa.generateFile(_builder_2.toString(), _builder_3);
    StringConcatenation _builder_4 = new StringConcatenation();
    String _name_6 = content.getName();
    _builder_4.append(_name_6);
    _builder_4.append("/run.sh");
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("#!/bin/bash");
    _builder_5.newLine();
    _builder_5.append("rm -r ./logs");
    _builder_5.newLine();
    _builder_5.append("mkdir -p ./logs");
    _builder_5.newLine();
    _builder_5.append("docker-compose up");
    _builder_5.newLine();
    fsa.generateFile(_builder_4.toString(), _builder_5);
    StringConcatenation _builder_6 = new StringConcatenation();
    String _name_7 = content.getName();
    _builder_6.append(_name_7);
    _builder_6.append("/exec.sh");
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append("#!/bin/bash");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("# local exec.sh");
    _builder_7.newLine();
    _builder_7.append("# syntax : bash exec.sh");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("if [ -z ${var+x} ]; then name=\"code_1\"; else name=$1; fi\t# if local call = no $1");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("if [ -z ${var+x} ]; then path_1=\"../../data\"; else path_1=\"data\"; fi\t# if local call = no path of first launcher");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("if [ -z ${var+x} ]; then path_2=\".\"; else path_2=\"./src-gen/$name/\"; fi\t# if local call = no path of first launcher");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("for D in $path_1/$name/*/\t\t# for each folder in directory");
    _builder_7.newLine();
    _builder_7.append("do");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("target=$D\"results\"\t\t\t# results\' file");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("echo \"$path_1 -> path_1\"");
    _builder_7.newLine();
    _builder_7.append("echo \"$target -> target\"");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("path_2=\"./src-gen/$name/\"");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("echo \"<< $1 >>\" >> $target");
    _builder_7.newLine();
    _builder_7.append("echo \"\" >> $target");
    _builder_7.newLine();
    _builder_7.newLine();
    {
      EList<Language> _languages_2 = content.getLanguages();
      for(final Language l_2 : _languages_2) {
        _builder_7.append("echo \"< ");
        String _name_8 = l_2.getName();
        _builder_7.append(_name_8);
        _builder_7.append(" >\"");
        _builder_7.newLineIfNotEmpty();
        _builder_7.append("echo \"< ");
        String _name_9 = l_2.getName();
        _builder_7.append(_name_9);
        _builder_7.append(" >\" >> $target");
        _builder_7.newLineIfNotEmpty();
        String _bash_command = this.bash_command(l_2.getName());
        _builder_7.append(_bash_command);
        _builder_7.append("$path_2");
        String _name_10 = l_2.getName();
        _builder_7.append(_name_10);
        _builder_7.append("/");
        String _target = l_2.getTarget();
        _builder_7.append(_target);
        _builder_7.append(".");
        String _file_extension = this.file_extension(l_2.getName());
        _builder_7.append(_file_extension);
        _builder_7.append(" >> $target");
        _builder_7.newLineIfNotEmpty();
        _builder_7.append("pwd");
        _builder_7.newLine();
        _builder_7.append("echo \"<END ");
        String _name_11 = l_2.getName();
        _builder_7.append(_name_11);
        _builder_7.append(" >\" >> $target");
        _builder_7.newLineIfNotEmpty();
        _builder_7.append("echo \"<END ");
        String _name_12 = l_2.getName();
        _builder_7.append(_name_12);
        _builder_7.append(" >\"");
        _builder_7.newLineIfNotEmpty();
        _builder_7.append("echo \"\"");
        _builder_7.newLine();
        _builder_7.append("echo \"----------------------------------------\" >> $target");
        _builder_7.newLine();
        _builder_7.newLine();
      }
    }
    _builder_7.newLine();
    _builder_7.append("done");
    _builder_7.newLine();
    fsa.generateFile(_builder_6.toString(), _builder_7);
  }
  
  private String bash_command(final String language) {
    String _xblockexpression = null;
    {
      final String command = language;
      String _switchResult = null;
      if (command != null) {
        switch (command) {
          case "bash":
            _switchResult = "";
            break;
          case "bash_awk":
            _switchResult = "";
            break;
          case "R":
            _switchResult = "Rscript ";
            break;
          case "R_fwrite":
            _switchResult = "Rscript ";
            break;
          case "python3":
            _switchResult = "python3 ";
            break;
          default:
            _switchResult = "#";
            break;
        }
      } else {
        _switchResult = "#";
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  private String file_extension(final String language) {
    String _xblockexpression = null;
    {
      final String dot_extension = language;
      String _switchResult = null;
      if (dot_extension != null) {
        switch (dot_extension) {
          case "bash":
            _switchResult = "sh";
            break;
          case "bash_awk":
            _switchResult = "sh";
            break;
          case "R":
            _switchResult = "R";
            break;
          case "R_fwrite":
            _switchResult = "R";
            break;
          case "python3":
            _switchResult = "py";
            break;
          default:
            _switchResult = "#";
            break;
        }
      } else {
        _switchResult = "#";
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
}
