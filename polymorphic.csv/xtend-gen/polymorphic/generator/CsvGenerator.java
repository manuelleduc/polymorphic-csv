/**
 * generated by Xtext 2.13.0
 */
package polymorphic.generator;

import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import polymorphic.csv.Language;
import polymorphic.csv.Model;
import polymorphic.generator.GeneratorCollection;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CsvGenerator extends AbstractGenerator {
  private GeneratorCollection generators = new GeneratorCollection();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model content = ((Model) _head);
    final Consumer<Language> _function = (Language language) -> {
      this.generators.getMap().get(language.getName().toLowerCase()).generate(content, language, fsa);
    };
    content.getLanguages().forEach(_function);
  }
}
