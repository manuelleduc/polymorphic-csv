package polymorphic.generator;

import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import polymorphic.csv.Model;
import polymorphic.generator.ICsvGenerator;

@SuppressWarnings("all")
public class ApacheCommonCsvGenerator implements ICsvGenerator {
  @Override
  public void generate(final Model content, final IFileSystemAccess2 fsa) {
    final String className = IterableExtensions.<String>head(ListExtensions.<String>reverse(((List<String>)Conversions.doWrapArray(content.getTarget().split("\\.")))));
    final String package_ = IterableExtensions.join(ListExtensions.<String>reverse(IterableExtensions.<String>toList(IterableExtensions.<String>tail(ListExtensions.<String>reverse(((List<String>)Conversions.doWrapArray(content.getTarget().split("\\."))))))), ".");
    StringConcatenation _builder = new StringConcatenation();
    String _replaceAll = content.getTarget().replaceAll("\\.", "/");
    _builder.append(_replaceAll);
    _builder.append(".java");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package ");
    _builder_1.append(package_);
    _builder_1.append(";");
    _builder_1.newLineIfNotEmpty();
    _builder_1.newLine();
    _builder_1.append("import java.io.*;");
    _builder_1.newLine();
    _builder_1.append("import java.util.*;");
    _builder_1.newLine();
    _builder_1.append("import org.apache.commons.csv.*;");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.newLine();
    _builder_1.append("public class ");
    _builder_1.append(className);
    _builder_1.append(" {");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("  ");
    _builder_1.append("private static final String NL = System.getProperty(\"line.separator\");");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static void main(String[] args) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Reader iCvs = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Writer oCvs = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("System.out.println(textFileContentsToString(FILENAME_IR));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("iCvs = new BufferedReader(new FileReader(FILENAME_IR));");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("oCvs = new BufferedWriter(new FileWriter(FILENAME_OR));");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("processCsv(iCvs, oCvs);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("catch (IOException ex) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("ex.printStackTrace();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("if (iCvs != null) { iCvs.close(); }");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("if (oCvs != null) { oCvs.close(); }");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("catch (IOException ex) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("ex.printStackTrace();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("System.out.println(textFileContentsToString(FILENAME_OR));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static void processCsv(Reader iCvs, Writer oCvs) throws IOException {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("CSVPrinter printer = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("printer = new CSVPrinter(oCvs, CSVFormat.DEFAULT.withRecordSeparator(NL));");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("List<String> oCvsHeaders;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("List<String> oCvsRecord;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("CSVParser records = CSVFormat.DEFAULT.withHeader().parse(iCvs);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Map<String, Integer> irHeader = records.getHeaderMap();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("oCvsHeaders = new ArrayList<String>(Arrays.asList((irHeader.keySet()).toArray(new String[0])));");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("oCvsHeaders.add(COL_NAME_SUM);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("printer.printRecord(oCvsHeaders);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("for (CSVRecord record : records) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("oCvsRecord = record2list(record, oCvsHeaders);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("printer.printRecord(oCvsRecord);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (printer != null) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("printer.close();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private static List<String> record2list(CSVRecord record, List<String> oCvsHeaders) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("List<String> cvsRecord;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Map<String, String> rMap = record.toMap();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("long recNo = record.getRecordNumber();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("rMap = alterRecord(rMap, recNo);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int sum = 0;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("sum = summation(rMap);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("rMap.put(COL_NAME_SUM, String.valueOf(sum));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("cvsRecord = new ArrayList<String>();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("for (String key : oCvsHeaders) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("cvsRecord.add(rMap.get(key));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return cvsRecord;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private static Map<String, String> alterRecord(Map<String, String> rMap, long recNo) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int rv;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Random rg = new Random(recNo);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("rv = rg.nextInt(50);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String[] ks = rMap.keySet().toArray(new String[0]);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int ix = rg.nextInt(ks.length);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("long yv = 0;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String ky = ks[ix];");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("String xv = rMap.get(ky);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("if (xv != null && xv.length() > 0) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("yv = Long.valueOf(xv) + rv;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("rMap.put(ks[ix], String.valueOf(yv));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return rMap;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private static int summation(Map<String, String> rMap) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("int sum = 0;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("for (String col : rMap.keySet()) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("String nv = rMap.get(col);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("sum += nv != null && nv.length() > 0 ? Integer.valueOf(nv) : 0;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return sum;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private static String textFileContentsToString(String filename) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("StringBuilder lineOut = new StringBuilder();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Scanner fs = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("try {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("fs = new Scanner(new File(filename));");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("lineOut.append(filename);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("lineOut.append(NL);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("while (fs.hasNextLine()) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("String line = fs.nextLine();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("lineOut.append(line);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("lineOut.append(NL);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("catch (FileNotFoundException ex) {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("// TODO Auto-generated catch block");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("ex.printStackTrace();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("if (fs != null) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("fs.close();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return lineOut.toString();");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    fsa.generateFile(_builder.toString(), _builder_1);
  }
}
